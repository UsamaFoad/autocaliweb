#!/bin/bash

#------------------------------------------------------------------------------------------------------------------------
#  Make sure required directories exist
#------------------------------------------------------------------------------------------------------------------------

install -d -o abc -g abc /config/processed_books/converted
install -d -o abc -g abc /config/processed_books/imported
install -d -o abc -g abc /config/processed_books/failed
install -d -o abc -g abc /config/processed_books/fixed_originals
install -d -o abc -g abc /config/log_archive
install -d -o abc -g abc /config/.acw_conversion_tmp

install -d -o abc -g abc /config/.config/calibre/plugins
ln -sf /config/.config/calibre/plugins /config/calibre_plugins

#------------------------------------------------------------------------------------------------------------------------
#  Remove any leftover lock files
#------------------------------------------------------------------------------------------------------------------------

declare -a lockFiles=("ingest_processor.lock" "convert_library.lock" "cover_enforcer.lock" "kindle_epub_fixer.lock")

echo "[acw-init] Checking for leftover lock files from previous instance..."

counter=0

for f in "${lockFiles[@]}"
do
    if [ -f "/tmp/$f" ]
    then
        echo "[acw-init] Leftover $f exists, removing now..."
        rm "/tmp/$f"
        echo "[acw-init] Leftover $f removed."
        let counter++
    fi
done

if [[ "$counter" -eq 0 ]]
then
    echo "[acw-init] No leftover lock files to remove. Ending service..."
else
    echo "[acw-init] $counter lock file(s) removed. Ending service..."
fi

#------------------------------------------------------------------------------------------------------------------------
#  Check for existing app.db and create one from the included example if one doesn't already exist
#------------------------------------------------------------------------------------------------------------------------

echo "[acw-init] Checking for an existing app.db in /config..."

if [ ! -f /config/app.db ]; then
    echo "[acw-init] No existing app.db found! Creating new one..."
    cp /app/autocaliweb/library/app.db /config/app.db
else
    echo "[acw-init] Existing app.db found!"
fi

#------------------------------------------------------------------------------------------------------------------------
#  Ensure correct binary paths in app.db
#------------------------------------------------------------------------------------------------------------------------

echo "[acw-init] Setting binary paths in '/config/app.db' to the correct ones..."

sqlite3 /config/app.db <<EOS
    update settings set config_kepubifypath='/usr/bin/kepubify', config_converterpath='/usr/bin/ebook-convert', config_binariesdir='/usr/bin';
EOS

if [[ $? == 0 ]]
then
    echo "[acw-init] Successfully set binary paths in '/config/app.db'!"
elif [[ $? > 0 ]]
then
    echo "[acw-init] Service could not successfully set binary paths for '/config/app.db' (see errors above)."
fi


echo "[acw-init] ACW-init complete! Service exiting now..."

#------------------------------------------------------------------------------------------------------------------------
#  Set required permissions
#------------------------------------------------------------------------------------------------------------------------

# Always ensure internal paths are owned by abc:abc
declare -a requiredDirs=("/config" "/app/autocaliweb")

# Only include the library if explicitly enabled
if [ "${ACW_CHOWN_LIBRARY:-false}" = "true" ]; then
    requiredDirs+=("${LIBRARY_DIR:-/calibre-library}")
fi

dirs=$(printf ", %s" "${requiredDirs[@]}")
dirs=${dirs:1}

echo "[acw-init] Recursively setting ownership of:${dirs} to abc:abc..."

for d in "${requiredDirs[@]}"
do
    if [ -d "$d" ]; then
        chown -R abc:abc "$d"
        if [[ $? == 0 ]]
        then
            echo "[acw-init] Successfully set permissions for '$d'!"
        elif [[ $? > 0 ]]
        then
            echo "[acw-init] Service could not successfully set permissions for '$d' (see errors above)."
        fi
    else
        echo "[acw-init] Skipping '$d' (directory does not exist)."
    fi
done

#------------------------------------------------------------------------------------------------------------------------
# Qt6/Kernel compatibility check and possible fix
#------------------------------------------------------------------------------------------------------------------------

MIN_KERNEL="5.4"
HOST_KERNEL_VERSION="$(uname -r)"
HOST_KERNEL="${HOST_KERNEL_VERSION%%-*}"

version_ge() {
    [ "$(printf '%s\n' "$2" "$1" | sort -V | tail -n1)" = "$1" ];
}

QT_SENTINEL="/app/calibre/.qt6_processed"
if [ ! -f "$QT_SENTINEL" ]; then
    if version_ge "$HOST_KERNEL" "$MIN_KERNEL"; then
        echo "[acw-init] [Qt6] Kernel version is compatible with Qt6, no action needed."
    else
        echo "[acw-init] [Qt6] Host kernel version $HOST_KERNEL is lower than required $MIN_KERNEL, attempting legacy compatibility by stripping .note.ABI-tag..."

        if command -v strip >/dev/null 2>&1; then
            any_stripped=0
            for f in /app/calibre/lib/libQr6*.so*; do
                [ -f "$f" ] || continue
                if readelf -S "$f" | grep -q '.note.ABI-tag'; then
                    strip --remove-section=.note.ABI-tag "$f" 2>/dev/null || true
                    any_stripped=1
                fi
            done

            if [ $any_stripped -eq 1 ]; then
                echo "************************************* ATTENTION *************************************"
                echo "[acw-init] [Qt6] Stripped .note.ABI-tag from Qt6 libraries to ensure compatibility with older kernels. Features may still be limited on very old kernels. This will enable devices with kernels >= $MIN_KERNEL to run Autocaliweb however features that require Qt6 may not work as expected (e.g. working with PDF files)."
                echo "************************************* ATTENTION *************************************"
            else
                echo "[acw-init] [Qt6] No ABI note sections found to strip, no action taken."
            fi
        else
            echo "[acw-init] [Qt6] 'strip' command not found, cannot attempt to strip .note.ABI-tag."
        fi
    fi
    touch "$QT_SENTINEL"
else
    echo "[acw-init] [Qt6] Qt compatibility confirmed, no action needed."
fi